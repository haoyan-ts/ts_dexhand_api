syntax = "proto3";

package ts.dexhand.v1;

import "ts/dexhand/v1/teleoperation_service.proto";
import "ts/dexhand/v1/common.proto";

option csharp_namespace = "TeleoperationServiceGrpc";

service HandService {
  // Hand control operations
  rpc EnableHand(EnableHandRequest) returns (EnableHandResponse) {}
  rpc DisableHand(DisableHandRequest) returns (DisableHandResponse) {}
  rpc ConnectHand(ConnectHandRequest) returns (ConnectHandResponse) {}
  rpc DisconnectHand(DisconnectHandRequest) returns (DisconnectHandResponse) {}

  // Hand pose control
  rpc SetHandPose(SetHandPoseRequest) returns (SetHandPoseResponse) {}
  rpc GetHandPose(GetHandPoseRequest) returns (GetHandPoseResponse) {}

  // // Streaming operations
  // rpc SendPose(stream SendHandPoseRequest) returns (stream SendHandPoseResponse) {}
  // rpc SendJoint(stream SendHandJointRequest) returns (stream SendHandJointResponse) {}
  // rpc ReceiveStatus(stream ReceiveHandStatusRequest) returns (stream ReceiveHandStatusResp
}

// Basic request messages
message EnableHandRequest {
  Hand hand = 1;
}

message DisableHandRequest {
  Hand hand = 1;
}

message ConnectHandRequest {
  Hand hand = 1;
  PortConfig port_config = 2;
}

message DisconnectHandRequest {
  Hand hand = 1;
}

message EnableHandResponse {
  bool success = 1;
}

message DisableHandResponse {
  bool success = 1;
}

message ConnectHandResponse {
  bool success = 1;
}

message DisconnectHandResponse {
  bool success = 1;
}

// message ChangeHandControlModeResponse {
//   bool success = 1;
// }
// Control mode
// message ChangeHandControlModeRequest {
//   Hand hand = 1;
//   uint32 control_mode = 2;
// }

// Hand pose control
message SetHandPoseRequest {
  Hand hand = 1;
  repeated double poses = 2;
}

message SetHandPoseResponse {
  bool success = 1;
}

message GetHandPoseRequest {
  Hand hand = 1;
}

message GetHandPoseResponse {
  repeated double poses = 1;
}
