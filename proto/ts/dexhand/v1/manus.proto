syntax = "proto3";

package ts.dexhand.v1;

import "ts/dexhand/v1/common.proto";

option csharp_namespace = "TeleoperationServiceGrpc";

service ManusService {
  // Hand operations
  rpc ListHandSensors(ListHandSensorsRequest) returns (ListHandSensorsResponse) {}
  rpc GetHandSensor(GetHandSensorRequest) returns (GetHandSensorResponse) {}
  rpc CreateHandSensor(CreateHandSensorRequest) returns (CreateHandSensorResponse) {}
  rpc UpdateHandSensor(UpdateHandSensorRequest) returns (UpdateHandSensorResponse) {}
  rpc DeleteHandSensor(DeleteHandSensorRequest) returns (DeleteHandSensorResponse) {}

  // Glove CRUD operations - alias for HandSensor
  rpc ListGloves(ListGlovesRequest) returns (ListGlovesResponse) {}
  rpc GetGlove(GetGloveRequest) returns (GetGloveResponse) {}
  rpc CreateGlove(CreateGloveRequest) returns (CreateGloveResponse) {}
  rpc UpdateGlove(UpdateGloveRequest) returns (UpdateGloveResponse) {}
  rpc DeleteGlove(DeleteGloveRequest) returns (DeleteGloveResponse) {}

  // Wrist operations
  rpc ListWristSensors(ListWristSensorsRequest) returns (ListWristSensorsResponse) {}
  rpc GetWristSensor(GetWristSensorRequest) returns (GetWristSensorResponse) {}
  rpc CreateWristSensor(CreateWristSensorRequest) returns (CreateWristSensorResponse) {}
  rpc UpdateWristSensor(UpdateWristSensorRequest) returns (UpdateWristSensorResponse) {}
  rpc DeleteWristSensor(DeleteWristSensorRequest) returns (DeleteWristSensorResponse) {}

  // Tracker operations
  rpc ListTrackers(ListTrackersRequest) returns (ListTrackersResponse) {}
  rpc GetTracker(GetTrackerRequest) returns (GetTrackerResponse) {}
  rpc CreateTracker(CreateTrackerRequest) returns (CreateTrackerResponse) {}
  rpc UpdateTracker(UpdateTrackerRequest) returns (UpdateTrackerResponse) {}
  rpc DeleteTracker(DeleteTrackerRequest) returns (DeleteTrackerResponse) {}

  // Data operations
  rpc SetHandSensorData(SetHandSensorDataRequest) returns (SetHandSensorDataResponse) {}
  rpc SetWristSensorData(SetWristSensorDataRequest) returns (SetWristSensorDataResponse) {}

  rpc SetGloveData(SetGloveDataRequest) returns (SetGloveDataResponse) {}
  rpc GetGloveData(GetGloveDataRequest) returns (GetGloveDataResponse) {}
  rpc SetTrackerData(SetTrackerDataRequest) returns (SetTrackerDataResponse) {}
  rpc GetTrackerData(GetTrackerDataRequest) returns (GetTrackerDataResponse) {}

  // World operations
  rpc CreateFrameTransformation(CreateFrameTransformationRequest) returns (CreateFrameTransformationResponse) {}
  rpc UpdateFrameTransformation(UpdateFrameTransformationRequest) returns (UpdateFrameTransformationResponse) {}
  rpc DeleteFrameTransformation(DeleteFrameTransformationRequest) returns (DeleteFrameTransformationResponse) {}
  rpc GetFrameTransformation(GetFrameTransformationRequest) returns (GetFrameTransformationResponse) {}

  // deprecated
  rpc SetFrame(SetFrameRequest) returns (SetFrameResponse) {}
  rpc GetFrames(GetFramesRequest) returns (GetFramesResponse) {}
}

// World related messages
message FrameTransformation {
  repeated FrameTransformationData data = 1;
  float scale = 2;
  repeated float translation = 3;
  repeated float rotation = 4;
}

message FrameTransformationData {
  Vector3 source = 1; // Source reference frame
  Vector3 target = 2; // Target reference frame
}

message CreateFrameTransformationRequest {}

message CreateFrameTransformationResponse {
  FrameTransformation frame_transformation = 1;
}

message UpdateFrameTransformationRequest {
  FrameTransformation frame_transformation = 1;
}

message UpdateFrameTransformationResponse {
  FrameTransformation frame_transformation = 1;
}

message DeleteFrameTransformationRequest {}

message DeleteFrameTransformationResponse {
  bool success = 1;
}

message GetFrameTransformationRequest {}

message GetFrameTransformationResponse {
  FrameTransformation frame_transformation = 1;
}

// Frame related messages - deprecated

message TargetFrame {
  Vector3 position = 1;
}

message SourceFrame {
  Vector3 position = 1;
}

message SetFrameRequest {
  string index = 1;
  TargetFrame target = 2;
  SourceFrame source = 3;
}

message SetFrameResponse {
  bool success = 1;
}

message GetFramesRequest {}

message GetFramesResponse {
  message FramePair {
    string index = 1;
    TargetFrame target = 2;
    SourceFrame source = 3;
  }

  repeated FramePair frame_pairs = 1;
}

// Glove related messages
message Glove {
  // uint32_t in Manus Core
  string id = 1;

  string name = 2;
  Side side = 3;
  string description = 4;
}

message ListGlovesRequest {}

message ListGlovesResponse {
  repeated Glove gloves = 1;
}

message GetGloveRequest {
  string id = 1;
}

message GetGloveResponse {
  Glove glove = 1;
}

message CreateGloveRequest {
  Glove glove = 1;
}

message CreateGloveResponse {
  Glove glove = 1;
}

message UpdateGloveRequest {
  Glove glove = 1;
}

message UpdateGloveResponse {
  Glove glove = 1;
}

message DeleteGloveRequest {
  string id = 1;
}

message DeleteGloveResponse {
  bool success = 1;
}

message ErgonomicsData {
  string id = 1;
  uint32 timestamp = 2;

  repeated double data = 3;
}

message SetGloveDataRequest {
  string id = 1;
  ErgonomicsData ergonomics_data = 2;
}

message SetGloveDataResponse {
  bool success = 1;
}

message GetGloveDataRequest {
  string id = 1;
}

message GetGloveDataResponse {
  string id = 1;
  ErgonomicsData ergonomics_data = 2;
}

// Tracker related messages
enum TrackerType {
  TRACKER_TYPE_UNSPECIFIED = 0;
  TRACKER_TYPE_HEAD = 1;
  TRACKER_TYPE_WAIST = 2;
  TRACKER_TYPE_LEFT_HAND = 3;
  TRACKER_TYPE_RIGHT_HAND = 4;
  TRACKER_TYPE_LEFT_FOOT = 5;
  TRACKER_TYPE_RIGHT_FOOT = 6;
  TRACKER_TYPE_LEFT_UPPER_ARM = 7;
  TRACKER_TYPE_RIGHT_UPPER_ARM = 8;
  TRACKER_TYPE_LEFT_UPPER_LEG = 9;
  TRACKER_TYPE_RIGHT_UPPER_LEG = 10;
  TRACKER_TYPE_CONTROLLER = 11;
  TRACKER_TYPE_CAMERA = 12;
}

message Tracker {
  string id = 1;

  string name = 2;
  string description = 3;
  TrackerType type = 4;
}

message ListTrackersRequest {}

message ListTrackersResponse {
  repeated Tracker trackers = 1;
}

message GetTrackerRequest {
  string id = 1;
}

message GetTrackerResponse {
  Tracker tracker = 1;
}

message CreateTrackerRequest {
  Tracker tracker = 1;
}

message CreateTrackerResponse {
  Tracker tracker = 1;
}

message UpdateTrackerRequest {
  Tracker tracker = 1;
}

message UpdateTrackerResponse {
  Tracker tracker = 1;
}

message DeleteTrackerRequest {
  string id = 1;
}

message DeleteTrackerResponse {
  bool success = 1;
}

message TrackerData {
  string id = 1;
  uint32 timestamp = 2;

  // x, y, z, qx, qy, qz, qw
  repeated double pose = 4;
}

message SetTrackerDataRequest {
  string id = 1;
  TrackerData data = 2;
}

message SetTrackerDataResponse {
  bool success = 1;
}

message GetTrackerDataRequest {
  string id = 1;
}

message GetTrackerDataResponse {
  TrackerData data = 1;
}

// HandSensor related messages
message ListHandSensorsRequest {}

message ListHandSensorsResponse {
  repeated HandSensor hand_sensors = 1;
}

message GetHandSensorRequest {
  string id = 1;
}

message GetHandSensorResponse {
  HandSensor hand_sensor = 1;
}

message CreateHandSensorRequest {
  HandSensor hand_sensor = 1;
}

message CreateHandSensorResponse {
  HandSensor hand_sensor = 1;
}

message UpdateHandSensorRequest {
  HandSensor hand_sensor = 1;
}

message UpdateHandSensorResponse {
  HandSensor hand_sensor = 1;
}

message DeleteHandSensorRequest {
  string id = 1;
}

message DeleteHandSensorResponse {
  bool success = 1;
}

message SetHandSensorDataRequest {
  string id = 1;
  HandSensorData data = 2;
}

message SetHandSensorDataResponse {
  bool success = 1;
}

message HandSensor {
  string id = 1;
  string name = 2;
  Side side = 3;
  string description = 4;
}

message HandSensorData {
  string id = 1;
  uint32 timestamp = 2;
  uint32 num_sequence = 3;
  repeated double data = 4;
}

// WristSensor related messages
message ListWristSensorsRequest {}

message ListWristSensorsResponse {
  repeated WristSensor wrist_sensors = 1;
}

message GetWristSensorRequest {
  string id = 1;
}

message GetWristSensorResponse {
  WristSensor wrist_sensor = 1;
}

message CreateWristSensorRequest {
  WristSensor wrist_sensor = 1;
}

message CreateWristSensorResponse {
  WristSensor wrist_sensor = 1;
}

message UpdateWristSensorRequest {
  WristSensor wrist_sensor = 1;
}

message UpdateWristSensorResponse {
  WristSensor wrist_sensor = 1;
}

message DeleteWristSensorRequest {
  string id = 1;
}

message DeleteWristSensorResponse {
  bool success = 1;
}

message WristSensor {
  string id = 1;
  string name = 2;
  Side side = 3;
  string description = 4;
}

message WristSensorData {
  string id = 1;
  uint32 timestamp = 2;
  uint32 num_sequence = 3;
  repeated double data = 4;
}

message SetWristSensorDataRequest {
  string id = 1;
  WristSensorData data = 2;
}

message SetWristSensorDataResponse {
  bool success = 1;
}

message GloveData {
  string id = 1;
  uint32 timestamp = 2;
  uint32 num_sequence = 3;

  repeated double data = 4;
}
