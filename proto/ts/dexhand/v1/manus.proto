syntax = "proto3";

package ts.dexhand.v1;

import "ts/dexhand/v1/common.proto";

option csharp_namespace = "TeleoperationServiceGrpc";

service ManusService {
  // Glove CRUD operations - alias for HandSensor
  rpc ListGloves(ListGlovesRequest) returns (ListGlovesResponse) {}
  rpc GetGlove(GetGloveRequest) returns (GetGloveResponse) {}
  rpc CreateGlove(CreateGloveRequest) returns (CreateGloveResponse) {}
  rpc UpdateGlove(UpdateGloveRequest) returns (UpdateGloveResponse) {}
  rpc DeleteGlove(DeleteGloveRequest) returns (DeleteGloveResponse) {}

  rpc ListTrackers(ListTrackersRequest) returns (ListTrackersResponse) {}
  rpc GetTracker(GetTrackerRequest) returns (GetTrackerResponse) {}
  rpc CreateTracker(CreateTrackerRequest) returns (CreateTrackerResponse) {}
  rpc UpdateTracker(UpdateTrackerRequest) returns (UpdateTrackerResponse) {}
  rpc DeleteTracker(DeleteTrackerRequest) returns (DeleteTrackerResponse) {}

  rpc SetGloveData(SetGloveDataRequest) returns (SetGloveDataResponse) {}
  rpc GetGloveData(GetGloveDataRequest) returns (GetGloveDataResponse) {}
  rpc SetTrackerData(SetTrackerDataRequest) returns (SetTrackerDataResponse) {}
  rpc GetTrackerData(GetTrackerDataRequest) returns (GetTrackerDataResponse) {}

  rpc SetCombinedSensorData(SetCombinedSensorDataRequest) returns (SetCombinedSensorDataResponse) {}

  // World operations
  rpc CreateFrameTransformation(CreateFrameTransformationRequest) returns (CreateFrameTransformationResponse) {}
  rpc UpdateFrameTransformation(UpdateFrameTransformationRequest) returns (UpdateFrameTransformationResponse) {}
  rpc DeleteFrameTransformation(DeleteFrameTransformationRequest) returns (DeleteFrameTransformationResponse) {}
  rpc GetFrameTransformation(GetFrameTransformationRequest) returns (GetFrameTransformationResponse) {}
}

// World related messages
message FrameTransformation {
  repeated FrameTransformationData data = 1;
  float scale = 2;
  repeated float translation = 3;
  repeated float rotation = 4;
}

message FrameTransformationData {
  Vector3 source = 1; // Source reference frame
  Vector3 target = 2; // Target reference frame
}

message CreateFrameTransformationRequest {}

message CreateFrameTransformationResponse {
  FrameTransformation frame_transformation = 1;
}

message UpdateFrameTransformationRequest {
  FrameTransformation frame_transformation = 1;
}

message UpdateFrameTransformationResponse {
  FrameTransformation frame_transformation = 1;
}

message DeleteFrameTransformationRequest {}

message DeleteFrameTransformationResponse {
  bool success = 1;
}

message GetFrameTransformationRequest {}

message GetFrameTransformationResponse {
  FrameTransformation frame_transformation = 1;
}

// Frame related messages - deprecated

message TargetFrame {
  Vector3 position = 1;
}

message SourceFrame {
  Vector3 position = 1;
}

message SetFrameRequest {
  string index = 1;
  TargetFrame target = 2;
  SourceFrame source = 3;
}

message SetFrameResponse {
  bool success = 1;
}

message GetFramesRequest {}

message GetFramesResponse {
  message FramePair {
    string index = 1;
    TargetFrame target = 2;
    SourceFrame source = 3;
  }

  repeated FramePair frame_pairs = 1;
}

// Glove related messages
message Glove {
  // uint32_t in Manus Core
  string id = 1;

  string name = 2;
  Side side = 3;
  string description = 4;
}

message ListGlovesRequest {}

message ListGlovesResponse {
  repeated Glove gloves = 1;
}

message GetGloveRequest {
  Glove glove = 1;
}

message GetGloveResponse {
  Glove glove = 1;
}

message CreateGloveRequest {
  Glove glove = 1;
}

message CreateGloveResponse {
  Glove glove = 1;
}

message UpdateGloveRequest {
  Glove glove = 1;
}

message UpdateGloveResponse {
  Glove glove = 1;
}

message DeleteGloveRequest {
  Glove glove = 1;
}

message DeleteGloveResponse {
  bool success = 1;
}

message SetGloveDataRequest {
  uint32 timestamp = 1;
  GloveInfo glove_info = 2;
}

message SetGloveDataResponse {
  bool success = 1;
}

message GetGloveDataRequest {
  Glove glove = 1;
}

message GetGloveDataResponse {
  uint32 timestamp = 1;
  GloveInfo glove_info = 2;
}

// Tracker related messages
enum TrackerType {
  TRACKER_TYPE_UNSPECIFIED = 0;
  TRACKER_TYPE_HEAD = 1;
  TRACKER_TYPE_WAIST = 2;
  TRACKER_TYPE_LEFT_HAND = 3;
  TRACKER_TYPE_RIGHT_HAND = 4;
  TRACKER_TYPE_LEFT_FOOT = 5;
  TRACKER_TYPE_RIGHT_FOOT = 6;
  TRACKER_TYPE_LEFT_UPPER_ARM = 7;
  TRACKER_TYPE_RIGHT_UPPER_ARM = 8;
  TRACKER_TYPE_LEFT_UPPER_LEG = 9;
  TRACKER_TYPE_RIGHT_UPPER_LEG = 10;
  TRACKER_TYPE_CONTROLLER = 11;
  TRACKER_TYPE_CAMERA = 12;
}

message Tracker {
  string id = 1;

  string name = 2;
  string description = 3;
  Side side = 4;
  TrackerType type = 5;
}

message ListTrackersRequest {}

message ListTrackersResponse {
  repeated Tracker trackers = 1;
}

message GetTrackerRequest {
  Tracker tracker = 1;
}

message GetTrackerResponse {
  Tracker tracker = 1;
}

message CreateTrackerRequest {
  Tracker tracker = 1;
}

message CreateTrackerResponse {
  Tracker tracker = 1;
}

message UpdateTrackerRequest {
  Tracker tracker = 1;
}

message UpdateTrackerResponse {
  Tracker tracker = 1;
}

message DeleteTrackerRequest {
  Tracker tracker = 1;
}

message DeleteTrackerResponse {
  bool success = 1;
}

message SetTrackerDataRequest {
  uint32 timestamp = 1;
  TrackerInfo tracker_info = 2;
}

message SetTrackerDataResponse {
  bool success = 1;
}

message GetTrackerDataRequest {
  Tracker tracker = 1;
}

message GetTrackerDataResponse {
  uint32 timestamp = 1;
  TrackerInfo tracker_info = 2;
}

message GloveData {
  uint32 timestamp = 1;
  repeated double data = 2;
}

// Tracker information and data
message TrackerInfo {
  Tracker tracker = 1;
  repeated double data = 2;
}

// Glove information and data
message GloveInfo {
  Glove glove = 1;
  repeated double data = 2;
}

// Represents a synchronized set of sensor data from both tracker and glove
message CombinedSensorData {
  TrackerInfo tracker_info = 1;
  GloveInfo glove_info = 2;
}

message SetCombinedSensorDataRequest {
  uint32 timestamp = 1;
  CombinedSensorData sensor_data = 2;
}

message SetCombinedSensorDataResponse {
  bool success = 1;
}
