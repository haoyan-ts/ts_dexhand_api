syntax = "proto3";

package ts.dexhand.v1;

import "ts/dexhand/v1/teleoperation_service.proto";

option csharp_namespace = "TeleoperationServiceGrpc";

service ArmService {
  // Arm control operations
  rpc EnableArm(EnableArmRequest) returns (EnableArmResponse) {}
  rpc DisableArm(DisableArmRequest) returns (DisableArmResponse) {}
  rpc ConnectArm(ConnectArmRequest) returns (ConnectArmResponse) {}
  rpc DisconnectArm(DisconnectArmRequest) returns (DisconnectArmResponse) {}

  // Arm pose and joint control
  rpc ChangeControlMode(ChangeControlModeRequest) returns (ChangeControlModeResponse) {}
  // rpc SetPose(SetPoseRequest) returns (SetPoseResponse) {}
  // rpc SetJoint(SetJointRequest) returns (SetJointResponse) {}
  rpc GetJoint(GetJointRequest) returns (GetJointResponse) {}
  rpc GetPose(GetPoseRequest) returns (GetPoseResponse) {}
  rpc MoveJoint(MoveJointRequest) returns (MoveJointResponse) {}
  rpc MovePose(MovePoseRequest) returns (MovePoseResponse) {}

  // Streaming operations
  // rpc SendPose(stream SendArmPoseRequest) returns (stream google.protobuf.Empty) {}
  // rpc SendJoint(stream SendArmJointRequest) returns (stream google.protobuf.Empty) {}
  // rpc ReceiveStatus(stream ReceiveArmStatusRequest) returns (stream ReceiveArmStatusResponse) {}

  // Arm model operations
  // rpc SetupLerpModel(SetupLerpModelRequest) returns (SetupLerpModelResponse) {}
  // rpc SetupIKModel(SetupIKModelRequest) returns (SetupIKModelResponse) {}

  // Lerp model operations
  rpc CreateLerpModel(CreateLerpModelRequest) returns (CreateLerpModelResponse) {}
  rpc GetLerpModel(GetLerpModelRequest) returns (GetLerpModelResponse) {}
  rpc UpdateLerpModel(UpdateLerpModelRequest) returns (UpdateLerpModelResponse) {}
  rpc DeleteLerpModel(DeleteLerpModelRequest) returns (DeleteLerpModelResponse) {}
}

// Move joint request
message MoveJointRequest {
  Arm arm = 1;
  repeated double joint_angles = 2;
}

message MoveJointResponse {
  bool success = 1;
}

// Move pose
message MovePoseRequest {
  Arm arm = 1;
  repeated double poses = 2;
}

message MovePoseResponse {
  bool success = 1;
}

// Lerp model operations
message LerpPose {
  uint32 num_poses = 1;
  repeated double poses = 2;
}

message LerpModel {
  string mode_id = 1;
  string name = 2;
  repeated LerpPose lerp_model_poses = 3;
}

message CreateLerpModelRequest {
  Arm arm = 1;
}

message CreateLerpModelResponse {
  LerpModel lerp_model = 1;
}

message GetLerpModelRequest {
  Arm arm = 1;
}

message GetLerpModelResponse {
  LerpModel lerp_model = 1;
}

message UpdateLerpModelRequest {
  Arm arm = 1;
  LerpModel lerp_model = 2;
}

message UpdateLerpModelResponse {
  LerpModel lerp_model = 1;
}

message DeleteLerpModelRequest {
  Arm arm = 1;
}

message DeleteLerpModelResponse {
  bool success = 1;
}

message EnableArmRequest {
  Arm arm = 1;
}

message DisableArmRequest {
  Arm arm = 1;
}

message ConnectArmRequest {
  Arm arm = 1;
}

message DisconnectArmRequest {
  Arm arm = 1;
}

// Control mode
message ChangeControlModeRequest {
  Arm arm = 1;
  uint32 control_mode = 2;
}

message ChangeControlModeResponse {
  bool success = 1;
}

message JointAngleData {
  repeated double data = 1;
}

message GetJointRequest {
  Arm arm = 1;
}

message GetJointResponse {
  JointAngleData joint_angles = 1;
}

message PoseData {
  repeated double data = 1;
}

message GetPoseRequest {
  Arm arm = 1;
}

message GetPoseResponse {
  PoseData poses = 1;
}

// Response messages for operations that previously returned Empty
message EnableArmResponse {
  bool success = 1;
}

message DisableArmResponse {
  bool success = 1;
}

message ConnectArmResponse {
  bool success = 1;
}

message DisconnectArmResponse {
  bool success = 1;
}

message ChangeArmControlModeResponse {
  bool success = 1;
}
